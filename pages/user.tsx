import React, { useState, useEffect } from "react";
import { useWallet } from "@meshsdk/react";
import { useTransaction } from "../context/TransactionContext";
import { useUser } from "../context/UserContext";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const Dashboard = () => {
  const { transactions } = useTransaction();
  const { wallet, connected } = useWallet();
  const { userInfo, updateUserInfo } = useUser();

  const [address, setAddress] = useState(userInfo.address || "");
  const [balance, setBalance] = useState(userInfo.balance || "0 ADA");
  const [stakingAddress, setStakingAddress] = useState(userInfo.stakingAddress || "");

  const [activities, setActivities] = useState<any[]>([]);
  const [showActivities, setShowActivities] = useState(false); // ‚úÖ M·∫∑c ƒë·ªãnh ·∫©n

  // Th√™m useEffect ƒë·ªÉ x·ª≠ l√Ω s·ª± ki·ªán beforeunload
  // useEffect(() => {
  //   // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng s·∫Øp r·ªùi kh·ªèi trang
  //   const handleBeforeUnload = () => {
  //     // Ch·ªâ x√≥a key "userBalance" c·ª• th·ªÉ khi tho√°t trang
  //     localStorage.removeItem("userBalance");
      
  //     // N·∫øu mu·ªën x√≥a nhi·ªÅu key c·ª• th·ªÉ, b·∫°n c√≥ th·ªÉ th√™m v√†o ƒë√¢y
  //      localStorage.removeItem("userStakingAddress");
  //     localStorage.removeItem("activities");
  //     localStorage.removeItem("userInfo");
  //   };

  //   // Th√™m event listener
  //   window.addEventListener('beforeunload', handleBeforeUnload);

  //   // Cleanup function ƒë·ªÉ tr√°nh memory leak
  //   return () => {
  //     window.removeEventListener('beforeunload', handleBeforeUnload);
  //   };
  // }, []); // Ch·ªâ ch·∫°y m·ªôt l·∫ßn khi component mount

  useEffect(() => {
    console.log("üîÑ useEffect ƒëang ch·∫°y, ki·ªÉm tra k·∫øt n·ªëi...");
  
    if (!connected) {
      console.log("üö´ Kh√¥ng c√≥ k·∫øt n·ªëi v√≠, kh√¥ng c·∫≠p nh·∫≠t d·ªØ li·ªáu.");
      return;
    }
  
    const fetchWalletData = async () => {
      console.log("üîç Fetching d·ªØ li·ªáu v√≠...");
      try {
        const addr = await wallet.getChangeAddress();
        console.log("‚úÖ ƒê·ªãa ch·ªâ v√≠:", addr);
      } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu v√≠:", error);
      }
    };
  
    fetchWalletData();
  }, [wallet, connected, transactions]);
  

  const copyToClipboard = (text: string) => {
    if (text) {
      navigator.clipboard.writeText(text);
      toast.success("Copied to clipboard!");
    }
  };

  const handleDisconnect = () => {
  
    localStorage.removeItem("userInfo");
    localStorage.removeItem("userBalance");
    localStorage.removeItem("userStakingAddress");
    sessionStorage.clear();
  
    setAddress("");
    setBalance("0 ADA");
    setStakingAddress("");
  
    updateUserInfo({
      address: "",
      balance: "0 ADA",
      stakingAddress: "",
      transactions: 0,
    });
  
  };
  
  useEffect(() => {
    console.log("üîÑ useEffect ƒëang ch·∫°y, ki·ªÉm tra k·∫øt n·ªëi...");
  
    if (!connected) {
      console.log("üö´ Kh√¥ng c√≥ k·∫øt n·ªëi v√≠, kh√¥ng c·∫≠p nh·∫≠t d·ªØ li·ªáu.");
      return;
    }
  
    const fetchWalletData = async () => {
      console.log("üîç Fetching d·ªØ li·ªáu v√≠...");
      try {
        const addr = await wallet.getChangeAddress();
        console.log("‚úÖ ƒê·ªãa ch·ªâ v√≠:", addr);
        setAddress(addr); // ‚úÖ C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ v√≠ v√†o state
      } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu v√≠:", error);
      }
    };
  
    fetchWalletData();
  }, [wallet, connected, transactions]);
  
  const handleShowActivities = () => {
    if (!address) {
      toast.warning("B·∫°n c·∫ßn k·∫øt n·ªëi v√≠ tr∆∞·ªõc!");
      return;
    }
  
    setShowActivities((prev) => {
      const newShow = !prev;
  
      if (newShow) {
        const storedActivities = localStorage.getItem("activities");
  
        if (!storedActivities) {
          toast.info("Kh√¥ng c√≥ ho·∫°t ƒë·ªông n√†o!");
          setActivities([]);
          return true;
        }
  
        try {
          const parsedActivities = JSON.parse(storedActivities);
  
          console.log("üìå T·∫•t c·∫£ activities:", parsedActivities);
          console.log("üü¢ ƒê·ªãa ch·ªâ v√≠ ƒëang k·∫øt n·ªëi:", address);
  
          // ‚úÖ L·ªçc activities theo ƒë·ªãa ch·ªâ v√≠
          const filteredActivities = parsedActivities.filter((activity: any) => {
            console.log("üîç Ki·ªÉm tra activity:", activity);
            return  activity.walletAddress === address ||
            activity.getAddress === address || 
            activity.getAdress === address // ‚úÖ

          });
  
          console.log("üîç Activities t√¨m th·∫•y:", filteredActivities);
  
          if (filteredActivities.length === 0) {
            toast.info("Ch∆∞a c√≥ ho·∫°t ƒë·ªông n√†o cho v√≠ n√†y!");
          }
  
          setActivities(filteredActivities);
  
        } catch (error) {
          console.error("L·ªói khi parse activities:", error);
          toast.error("D·ªØ li·ªáu activities b·ªã l·ªói!");
          setActivities([]);
        }
      }
  
      return newShow;
    });
  };
  
  
  return (
    <div className="dashboard">
      <div className="dashboard__content">
        <div className="dashboard__avatar">
          <img
            className="dashboard__avatar-link"
            src="https://static.vecteezy.com/system/resources/previews/002/318/271/non_2x/user-profile-icon-free-vector.jpg"
            alt="User"
          />
        </div>
        <div className="dashboard__info">
        
        <p className="dashboard__info-item">
          Address: {address ? `${address.slice(0, 6)}...${address.slice(-6)}` : "N/A"}{" "}
          <button className="dashboard__copy-btn" onClick={() => copyToClipboard(address)}>
            üìã
          </button>
        </p>

        <p className="dashboard__info-item">
          Staking: {stakingAddress ? `${stakingAddress.slice(0, 6)}...${stakingAddress.slice(-6)}` : "N/A"}{" "}
          <button className="dashboard__copy-btn" onClick={() => copyToClipboard(stakingAddress)}>
            üìã
          </button>
        </p>

        <p className="dashboard__info-item">Asset: {balance}</p>
        <p className="dashboard__info-item">Transaction: {transactions}</p>
      </div>

        
      </div>

      
      <div className="dashboard__actions">
          <button className="dashboard__button">Refund</button>

          {/* ‚úÖ B·∫•m ƒë·ªÉ show activities */}
          <button className="dashboard__button" onClick={handleShowActivities}>
            Recently
          </button>
        </div>

      {/* ‚úÖ Ch·ªâ hi·ªán activities khi showActivities l√† true */}
      {showActivities && (
        <div className="dashboard__activities">
          <h3 className="dashboard__activities-title">Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y</h3>

          {/* N·∫øu r·ªóng th√¨ th√¥ng b√°o */}
          {activities.length === 0 ? (
            <p>Kh√¥ng c√≥ ho·∫°t ƒë·ªông n√†o!</p>
          ) : (
            <ul className="dashboard__activities-list">
              {activities.map((activity, index) => (
                <li key={index} className="dashboard__activities-item">
                  <p><strong>H√†nh ƒë·ªông:</strong> {activity.type.toUpperCase()}</p>
                  <p><strong>Th·ªùi gian:</strong> {new Date(activity.timestamp).toLocaleString()}</p>
                  <p><strong>V√≠:</strong> {activity.walletAddress.slice(0, 8)}...{activity.walletAddress.slice(-6)}</p>
                  <p><strong>M√£ Hash:</strong> {activity.txHash}</p>
                </li>
              ))}
            </ul>
          )}
        </div>
      )}
    </div>
  );
};

export default Dashboard;